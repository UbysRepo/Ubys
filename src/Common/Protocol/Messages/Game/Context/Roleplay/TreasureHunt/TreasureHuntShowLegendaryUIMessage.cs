//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Context.Roleplay.TreasureHunt
{
    using System.Collections.Generic;
    using System;
    
    
    public class TreasureHuntShowLegendaryUIMessage : NetworkMessage
    {
        
        public const int Id = 6498;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private List<System.UInt16> m_availableLegendaryIds;
        
        public virtual List<System.UInt16> AvailableLegendaryIds
        {
            get
            {
                return m_availableLegendaryIds;
            }
            set
            {
                m_availableLegendaryIds = value;
            }
        }
        
        public void Initiate(List<System.UInt16> availableLegendaryIds)
        {
            m_availableLegendaryIds = availableLegendaryIds;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteShort(((short)(m_availableLegendaryIds.Count)));
            int availableLegendaryIdsIndex;
            for (availableLegendaryIdsIndex = 0; (availableLegendaryIdsIndex < m_availableLegendaryIds.Count); availableLegendaryIdsIndex = (availableLegendaryIdsIndex + 1))
            {
                writer.WriteVarUhShort(m_availableLegendaryIds[availableLegendaryIdsIndex]);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            int availableLegendaryIdsCount = reader.ReadUShort();
            int availableLegendaryIdsIndex;
            m_availableLegendaryIds = new System.Collections.Generic.List<ushort>();
            for (availableLegendaryIdsIndex = 0; (availableLegendaryIdsIndex < availableLegendaryIdsCount); availableLegendaryIdsIndex = (availableLegendaryIdsIndex + 1))
            {
                m_availableLegendaryIds.Add(reader.ReadVarUhShort());
            }
        }
    }
}
