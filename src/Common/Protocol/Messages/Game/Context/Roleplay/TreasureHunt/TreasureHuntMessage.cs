//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Context.Roleplay.TreasureHunt
{
    using Common.Protocol.Network.Types.Game.Context.Roleplay.TreasureHunt;
    using Common.Protocol.Network;
    using System.Collections.Generic;
    using System;
    
    
    public class TreasureHuntMessage : NetworkMessage
    {
        
        public const int Id = 6486;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private byte m_questType;
        
        public virtual byte QuestType
        {
            get
            {
                return m_questType;
            }
            set
            {
                m_questType = value;
            }
        }
        
        private int m_startMapId;
        
        public virtual int StartMapId
        {
            get
            {
                return m_startMapId;
            }
            set
            {
                m_startMapId = value;
            }
        }
        
        private List<TreasureHuntStep> m_knownStepsList;
        
        public virtual List<TreasureHuntStep> KnownStepsList
        {
            get
            {
                return m_knownStepsList;
            }
            set
            {
                m_knownStepsList = value;
            }
        }
        
        private byte m_totalStepCount;
        
        public virtual byte TotalStepCount
        {
            get
            {
                return m_totalStepCount;
            }
            set
            {
                m_totalStepCount = value;
            }
        }
        
        private uint m_checkPointCurrent;
        
        public virtual uint CheckPointCurrent
        {
            get
            {
                return m_checkPointCurrent;
            }
            set
            {
                m_checkPointCurrent = value;
            }
        }
        
        private uint m_checkPointTotal;
        
        public virtual uint CheckPointTotal
        {
            get
            {
                return m_checkPointTotal;
            }
            set
            {
                m_checkPointTotal = value;
            }
        }
        
        private int m_availableRetryCount;
        
        public virtual int AvailableRetryCount
        {
            get
            {
                return m_availableRetryCount;
            }
            set
            {
                m_availableRetryCount = value;
            }
        }
        
        private List<TreasureHuntFlag> m_flags;
        
        public virtual List<TreasureHuntFlag> Flags
        {
            get
            {
                return m_flags;
            }
            set
            {
                m_flags = value;
            }
        }
        
        public void Initiate(byte questType, int startMapId, List<TreasureHuntStep> knownStepsList, byte totalStepCount, uint checkPointCurrent, uint checkPointTotal, int availableRetryCount, List<TreasureHuntFlag> flags)
        {
            m_questType = questType;
            m_startMapId = startMapId;
            m_knownStepsList = knownStepsList;
            m_totalStepCount = totalStepCount;
            m_checkPointCurrent = checkPointCurrent;
            m_checkPointTotal = checkPointTotal;
            m_availableRetryCount = availableRetryCount;
            m_flags = flags;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteByte(m_questType);
            writer.WriteInt(m_startMapId);
            writer.WriteShort(((short)(m_knownStepsList.Count)));
            int knownStepsListIndex;
            for (knownStepsListIndex = 0; (knownStepsListIndex < m_knownStepsList.Count); knownStepsListIndex = (knownStepsListIndex + 1))
            {
                TreasureHuntStep objectToSend = m_knownStepsList[knownStepsListIndex];
                writer.WriteUShort(((ushort)(objectToSend.ProtocolId)));
                objectToSend.Serialize(writer);
            }
            writer.WriteByte(m_totalStepCount);
            writer.WriteVarUhInt(m_checkPointCurrent);
            writer.WriteVarUhInt(m_checkPointTotal);
            writer.WriteInt(m_availableRetryCount);
            writer.WriteShort(((short)(m_flags.Count)));
            int flagsIndex;
            for (flagsIndex = 0; (flagsIndex < m_flags.Count); flagsIndex = (flagsIndex + 1))
            {
                TreasureHuntFlag objectToSend = m_flags[flagsIndex];
                objectToSend.Serialize(writer);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            m_questType = reader.ReadByte();
            m_startMapId = reader.ReadInt();
            int knownStepsListCount = reader.ReadUShort();
            int knownStepsListIndex;
            m_knownStepsList = new System.Collections.Generic.List<TreasureHuntStep>();
            for (knownStepsListIndex = 0; (knownStepsListIndex < knownStepsListCount); knownStepsListIndex = (knownStepsListIndex + 1))
            {
                TreasureHuntStep objectToAdd = ProtocolManager.GetTypeInstance<TreasureHuntStep>(reader.ReadUShort());
                objectToAdd.Deserialize(reader);
                m_knownStepsList.Add(objectToAdd);
            }
            m_totalStepCount = reader.ReadByte();
            m_checkPointCurrent = reader.ReadVarUhInt();
            m_checkPointTotal = reader.ReadVarUhInt();
            m_availableRetryCount = reader.ReadInt();
            int flagsCount = reader.ReadUShort();
            int flagsIndex;
            m_flags = new System.Collections.Generic.List<TreasureHuntFlag>();
            for (flagsIndex = 0; (flagsIndex < flagsCount); flagsIndex = (flagsIndex + 1))
            {
                TreasureHuntFlag objectToAdd = new TreasureHuntFlag();
                objectToAdd.Deserialize(reader);
                m_flags.Add(objectToAdd);
            }
        }
    }
}
