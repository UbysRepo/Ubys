//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Context.Roleplay.Party
{
    using Common.Protocol.Network.Types.Game.Context.Roleplay.Party;
    using System.Collections.Generic;
    using System;
    
    
    public class PartyLocateMembersMessage : AbstractPartyMessage
    {
        
        public const int Id = 5595;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private List<PartyMemberGeoPosition> m_geopositions;
        
        public virtual List<PartyMemberGeoPosition> Geopositions
        {
            get
            {
                return m_geopositions;
            }
            set
            {
                m_geopositions = value;
            }
        }
        
        public void Initiate(List<PartyMemberGeoPosition> geopositions)
        {
            m_geopositions = geopositions;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            base.Serialize(writer);
            writer.WriteShort(((short)(m_geopositions.Count)));
            int geopositionsIndex;
            for (geopositionsIndex = 0; (geopositionsIndex < m_geopositions.Count); geopositionsIndex = (geopositionsIndex + 1))
            {
                PartyMemberGeoPosition objectToSend = m_geopositions[geopositionsIndex];
                objectToSend.Serialize(writer);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            base.Deserialize(reader);
            int geopositionsCount = reader.ReadUShort();
            int geopositionsIndex;
            m_geopositions = new System.Collections.Generic.List<PartyMemberGeoPosition>();
            for (geopositionsIndex = 0; (geopositionsIndex < geopositionsCount); geopositionsIndex = (geopositionsIndex + 1))
            {
                PartyMemberGeoPosition objectToAdd = new PartyMemberGeoPosition();
                objectToAdd.Deserialize(reader);
                m_geopositions.Add(objectToAdd);
            }
        }
    }
}
