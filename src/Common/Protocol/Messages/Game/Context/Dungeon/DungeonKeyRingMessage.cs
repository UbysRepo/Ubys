//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Context.Dungeon
{
    using System.Collections.Generic;
    using System;
    
    
    public class DungeonKeyRingMessage : NetworkMessage
    {
        
        public const int Id = 6299;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private List<System.UInt16> m_availables;
        
        public virtual List<System.UInt16> Availables
        {
            get
            {
                return m_availables;
            }
            set
            {
                m_availables = value;
            }
        }
        
        private List<System.UInt16> m_unavailables;
        
        public virtual List<System.UInt16> Unavailables
        {
            get
            {
                return m_unavailables;
            }
            set
            {
                m_unavailables = value;
            }
        }
        
        public void Initiate(List<System.UInt16> availables, List<System.UInt16> unavailables)
        {
            m_availables = availables;
            m_unavailables = unavailables;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteShort(((short)(m_availables.Count)));
            int availablesIndex;
            for (availablesIndex = 0; (availablesIndex < m_availables.Count); availablesIndex = (availablesIndex + 1))
            {
                writer.WriteVarUhShort(m_availables[availablesIndex]);
            }
            writer.WriteShort(((short)(m_unavailables.Count)));
            int unavailablesIndex;
            for (unavailablesIndex = 0; (unavailablesIndex < m_unavailables.Count); unavailablesIndex = (unavailablesIndex + 1))
            {
                writer.WriteVarUhShort(m_unavailables[unavailablesIndex]);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            int availablesCount = reader.ReadUShort();
            int availablesIndex;
            m_availables = new System.Collections.Generic.List<ushort>();
            for (availablesIndex = 0; (availablesIndex < availablesCount); availablesIndex = (availablesIndex + 1))
            {
                m_availables.Add(reader.ReadVarUhShort());
            }
            int unavailablesCount = reader.ReadUShort();
            int unavailablesIndex;
            m_unavailables = new System.Collections.Generic.List<ushort>();
            for (unavailablesIndex = 0; (unavailablesIndex < unavailablesCount); unavailablesIndex = (unavailablesIndex + 1))
            {
                m_unavailables.Add(reader.ReadVarUhShort());
            }
        }
    }
}
