//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Chat.Channel
{
    using System.Collections.Generic;
    using System;
    
    
    public class EnabledChannelsMessage : NetworkMessage
    {
        
        public const int Id = 892;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private List<System.Byte> m_channels;
        
        public virtual List<System.Byte> Channels
        {
            get
            {
                return m_channels;
            }
            set
            {
                m_channels = value;
            }
        }
        
        private List<System.Byte> m_disallowed;
        
        public virtual List<System.Byte> Disallowed
        {
            get
            {
                return m_disallowed;
            }
            set
            {
                m_disallowed = value;
            }
        }
        
        public void Initiate(List<System.Byte> channels, List<System.Byte> disallowed)
        {
            m_channels = channels;
            m_disallowed = disallowed;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteShort(((short)(m_channels.Count)));
            int channelsIndex;
            for (channelsIndex = 0; (channelsIndex < m_channels.Count); channelsIndex = (channelsIndex + 1))
            {
                writer.WriteByte(m_channels[channelsIndex]);
            }
            writer.WriteShort(((short)(m_disallowed.Count)));
            int disallowedIndex;
            for (disallowedIndex = 0; (disallowedIndex < m_disallowed.Count); disallowedIndex = (disallowedIndex + 1))
            {
                writer.WriteByte(m_disallowed[disallowedIndex]);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            int channelsCount = reader.ReadUShort();
            int channelsIndex;
            m_channels = new System.Collections.Generic.List<byte>();
            for (channelsIndex = 0; (channelsIndex < channelsCount); channelsIndex = (channelsIndex + 1))
            {
                m_channels.Add(reader.ReadByte());
            }
            int disallowedCount = reader.ReadUShort();
            int disallowedIndex;
            m_disallowed = new System.Collections.Generic.List<byte>();
            for (disallowedIndex = 0; (disallowedIndex < disallowedCount); disallowedIndex = (disallowedIndex + 1))
            {
                m_disallowed.Add(reader.ReadByte());
            }
        }
    }
}
