//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Inventory.Preset
{
    using System.Collections.Generic;
    using System;
    
    
    public class InventoryPresetSaveCustomMessage : NetworkMessage
    {
        
        public const int Id = 6329;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private byte m_presetId;
        
        public virtual byte PresetId
        {
            get
            {
                return m_presetId;
            }
            set
            {
                m_presetId = value;
            }
        }
        
        private byte m_symbolId;
        
        public virtual byte SymbolId
        {
            get
            {
                return m_symbolId;
            }
            set
            {
                m_symbolId = value;
            }
        }
        
        private List<System.SByte> m_itemsPositions;
        
        public virtual List<System.SByte> ItemsPositions
        {
            get
            {
                return m_itemsPositions;
            }
            set
            {
                m_itemsPositions = value;
            }
        }
        
        private List<System.UInt32> m_itemsUids;
        
        public virtual List<System.UInt32> ItemsUids
        {
            get
            {
                return m_itemsUids;
            }
            set
            {
                m_itemsUids = value;
            }
        }
        
        public void Initiate(byte presetId, byte symbolId, List<System.SByte> itemsPositions, List<System.UInt32> itemsUids)
        {
            m_presetId = presetId;
            m_symbolId = symbolId;
            m_itemsPositions = itemsPositions;
            m_itemsUids = itemsUids;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteByte(m_presetId);
            writer.WriteByte(m_symbolId);
            writer.WriteShort(((short)(m_itemsPositions.Count)));
            int itemsPositionsIndex;
            for (itemsPositionsIndex = 0; (itemsPositionsIndex < m_itemsPositions.Count); itemsPositionsIndex = (itemsPositionsIndex + 1))
            {
                writer.WriteSByte(m_itemsPositions[itemsPositionsIndex]);
            }
            writer.WriteShort(((short)(m_itemsUids.Count)));
            int itemsUidsIndex;
            for (itemsUidsIndex = 0; (itemsUidsIndex < m_itemsUids.Count); itemsUidsIndex = (itemsUidsIndex + 1))
            {
                writer.WriteVarUhInt(m_itemsUids[itemsUidsIndex]);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            m_presetId = reader.ReadByte();
            m_symbolId = reader.ReadByte();
            int itemsPositionsCount = reader.ReadUShort();
            int itemsPositionsIndex;
            m_itemsPositions = new System.Collections.Generic.List<sbyte>();
            for (itemsPositionsIndex = 0; (itemsPositionsIndex < itemsPositionsCount); itemsPositionsIndex = (itemsPositionsIndex + 1))
            {
                m_itemsPositions.Add(reader.ReadSByte());
            }
            int itemsUidsCount = reader.ReadUShort();
            int itemsUidsIndex;
            m_itemsUids = new System.Collections.Generic.List<uint>();
            for (itemsUidsIndex = 0; (itemsUidsIndex < itemsUidsCount); itemsUidsIndex = (itemsUidsIndex + 1))
            {
                m_itemsUids.Add(reader.ReadVarUhInt());
            }
        }
    }
}
