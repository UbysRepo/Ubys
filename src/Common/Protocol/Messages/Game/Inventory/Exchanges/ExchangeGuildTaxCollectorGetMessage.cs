//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Inventory.Exchanges
{
    using Common.Protocol.Network.Types.Game.Data.Items;
    using System.Collections.Generic;
    using System;
    
    
    public class ExchangeGuildTaxCollectorGetMessage : NetworkMessage
    {
        
        public const int Id = 5762;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private string m_collectorName;
        
        public virtual string CollectorName
        {
            get
            {
                return m_collectorName;
            }
            set
            {
                m_collectorName = value;
            }
        }
        
        private short m_worldX;
        
        public virtual short WorldX
        {
            get
            {
                return m_worldX;
            }
            set
            {
                m_worldX = value;
            }
        }
        
        private short m_worldY;
        
        public virtual short WorldY
        {
            get
            {
                return m_worldY;
            }
            set
            {
                m_worldY = value;
            }
        }
        
        private int m_mapId;
        
        public virtual int MapId
        {
            get
            {
                return m_mapId;
            }
            set
            {
                m_mapId = value;
            }
        }
        
        private ushort m_subAreaId;
        
        public virtual ushort SubAreaId
        {
            get
            {
                return m_subAreaId;
            }
            set
            {
                m_subAreaId = value;
            }
        }
        
        private string m_userName;
        
        public virtual string UserName
        {
            get
            {
                return m_userName;
            }
            set
            {
                m_userName = value;
            }
        }
        
        private double m_experience;
        
        public virtual double Experience
        {
            get
            {
                return m_experience;
            }
            set
            {
                m_experience = value;
            }
        }
        
        private List<ObjectItemGenericQuantity> m_objectsInfos;
        
        public virtual List<ObjectItemGenericQuantity> ObjectsInfos
        {
            get
            {
                return m_objectsInfos;
            }
            set
            {
                m_objectsInfos = value;
            }
        }
        
        public void Initiate(string collectorName, short worldX, short worldY, int mapId, ushort subAreaId, string userName, double experience, List<ObjectItemGenericQuantity> objectsInfos)
        {
            m_collectorName = collectorName;
            m_worldX = worldX;
            m_worldY = worldY;
            m_mapId = mapId;
            m_subAreaId = subAreaId;
            m_userName = userName;
            m_experience = experience;
            m_objectsInfos = objectsInfos;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteUTF(m_collectorName);
            writer.WriteShort(m_worldX);
            writer.WriteShort(m_worldY);
            writer.WriteInt(m_mapId);
            writer.WriteVarUhShort(m_subAreaId);
            writer.WriteUTF(m_userName);
            writer.WriteDouble(m_experience);
            writer.WriteShort(((short)(m_objectsInfos.Count)));
            int objectsInfosIndex;
            for (objectsInfosIndex = 0; (objectsInfosIndex < m_objectsInfos.Count); objectsInfosIndex = (objectsInfosIndex + 1))
            {
                ObjectItemGenericQuantity objectToSend = m_objectsInfos[objectsInfosIndex];
                objectToSend.Serialize(writer);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            m_collectorName = reader.ReadUTF();
            m_worldX = reader.ReadShort();
            m_worldY = reader.ReadShort();
            m_mapId = reader.ReadInt();
            m_subAreaId = reader.ReadVarUhShort();
            m_userName = reader.ReadUTF();
            m_experience = reader.ReadDouble();
            int objectsInfosCount = reader.ReadUShort();
            int objectsInfosIndex;
            m_objectsInfos = new System.Collections.Generic.List<ObjectItemGenericQuantity>();
            for (objectsInfosIndex = 0; (objectsInfosIndex < objectsInfosCount); objectsInfosIndex = (objectsInfosIndex + 1))
            {
                ObjectItemGenericQuantity objectToAdd = new ObjectItemGenericQuantity();
                objectToAdd.Deserialize(reader);
                m_objectsInfos.Add(objectToAdd);
            }
        }
    }
}
