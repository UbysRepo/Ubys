//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Achievement
{
    using Common.Protocol.Network.Types.Game.Achievement;
    using System.Collections.Generic;
    using System;
    
    
    public class AchievementListMessage : NetworkMessage
    {
        
        public const int Id = 6205;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private List<System.UInt16> m_finishedAchievementsIds;
        
        public virtual List<System.UInt16> FinishedAchievementsIds
        {
            get
            {
                return m_finishedAchievementsIds;
            }
            set
            {
                m_finishedAchievementsIds = value;
            }
        }
        
        private List<AchievementRewardable> m_rewardableAchievements;
        
        public virtual List<AchievementRewardable> RewardableAchievements
        {
            get
            {
                return m_rewardableAchievements;
            }
            set
            {
                m_rewardableAchievements = value;
            }
        }
        
        public void Initiate(List<System.UInt16> finishedAchievementsIds, List<AchievementRewardable> rewardableAchievements)
        {
            m_finishedAchievementsIds = finishedAchievementsIds;
            m_rewardableAchievements = rewardableAchievements;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteShort(((short)(m_finishedAchievementsIds.Count)));
            int finishedAchievementsIdsIndex;
            for (finishedAchievementsIdsIndex = 0; (finishedAchievementsIdsIndex < m_finishedAchievementsIds.Count); finishedAchievementsIdsIndex = (finishedAchievementsIdsIndex + 1))
            {
                writer.WriteVarUhShort(m_finishedAchievementsIds[finishedAchievementsIdsIndex]);
            }
            writer.WriteShort(((short)(m_rewardableAchievements.Count)));
            int rewardableAchievementsIndex;
            for (rewardableAchievementsIndex = 0; (rewardableAchievementsIndex < m_rewardableAchievements.Count); rewardableAchievementsIndex = (rewardableAchievementsIndex + 1))
            {
                AchievementRewardable objectToSend = m_rewardableAchievements[rewardableAchievementsIndex];
                objectToSend.Serialize(writer);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            int finishedAchievementsIdsCount = reader.ReadUShort();
            int finishedAchievementsIdsIndex;
            m_finishedAchievementsIds = new System.Collections.Generic.List<ushort>();
            for (finishedAchievementsIdsIndex = 0; (finishedAchievementsIdsIndex < finishedAchievementsIdsCount); finishedAchievementsIdsIndex = (finishedAchievementsIdsIndex + 1))
            {
                m_finishedAchievementsIds.Add(reader.ReadVarUhShort());
            }
            int rewardableAchievementsCount = reader.ReadUShort();
            int rewardableAchievementsIndex;
            m_rewardableAchievements = new System.Collections.Generic.List<AchievementRewardable>();
            for (rewardableAchievementsIndex = 0; (rewardableAchievementsIndex < rewardableAchievementsCount); rewardableAchievementsIndex = (rewardableAchievementsIndex + 1))
            {
                AchievementRewardable objectToAdd = new AchievementRewardable();
                objectToAdd.Deserialize(reader);
                m_rewardableAchievements.Add(objectToAdd);
            }
        }
    }
}
