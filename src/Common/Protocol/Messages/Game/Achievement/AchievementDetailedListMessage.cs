//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Game.Achievement
{
    using Common.Protocol.Network.Types.Game.Achievement;
    using System.Collections.Generic;
    using System;
    
    
    public class AchievementDetailedListMessage : NetworkMessage
    {
        
        public const int Id = 6358;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private List<Achievement> m_startedAchievements;
        
        public virtual List<Achievement> StartedAchievements
        {
            get
            {
                return m_startedAchievements;
            }
            set
            {
                m_startedAchievements = value;
            }
        }
        
        private List<Achievement> m_finishedAchievements;
        
        public virtual List<Achievement> FinishedAchievements
        {
            get
            {
                return m_finishedAchievements;
            }
            set
            {
                m_finishedAchievements = value;
            }
        }
        
        public void Initiate(List<Achievement> startedAchievements, List<Achievement> finishedAchievements)
        {
            m_startedAchievements = startedAchievements;
            m_finishedAchievements = finishedAchievements;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteShort(((short)(m_startedAchievements.Count)));
            int startedAchievementsIndex;
            for (startedAchievementsIndex = 0; (startedAchievementsIndex < m_startedAchievements.Count); startedAchievementsIndex = (startedAchievementsIndex + 1))
            {
                Achievement objectToSend = m_startedAchievements[startedAchievementsIndex];
                objectToSend.Serialize(writer);
            }
            writer.WriteShort(((short)(m_finishedAchievements.Count)));
            int finishedAchievementsIndex;
            for (finishedAchievementsIndex = 0; (finishedAchievementsIndex < m_finishedAchievements.Count); finishedAchievementsIndex = (finishedAchievementsIndex + 1))
            {
                Achievement objectToSend = m_finishedAchievements[finishedAchievementsIndex];
                objectToSend.Serialize(writer);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            int startedAchievementsCount = reader.ReadUShort();
            int startedAchievementsIndex;
            m_startedAchievements = new System.Collections.Generic.List<Achievement>();
            for (startedAchievementsIndex = 0; (startedAchievementsIndex < startedAchievementsCount); startedAchievementsIndex = (startedAchievementsIndex + 1))
            {
                Achievement objectToAdd = new Achievement();
                objectToAdd.Deserialize(reader);
                m_startedAchievements.Add(objectToAdd);
            }
            int finishedAchievementsCount = reader.ReadUShort();
            int finishedAchievementsIndex;
            m_finishedAchievements = new System.Collections.Generic.List<Achievement>();
            for (finishedAchievementsIndex = 0; (finishedAchievementsIndex < finishedAchievementsCount); finishedAchievementsIndex = (finishedAchievementsIndex + 1))
            {
                Achievement objectToAdd = new Achievement();
                objectToAdd.Deserialize(reader);
                m_finishedAchievements.Add(objectToAdd);
            }
        }
    }
}
