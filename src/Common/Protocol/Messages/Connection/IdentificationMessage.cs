//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Messages.Connection
{
    using Common.Protocol.Network.Types.Version;
    using System.Collections.Generic;
    using System;
    
    
    public class IdentificationMessage : NetworkMessage
    {
        
        public const int Id = 4;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private bool m_autoconnect;
        
        public virtual bool Autoconnect
        {
            get
            {
                return m_autoconnect;
            }
            set
            {
                m_autoconnect = value;
            }
        }
        
        private bool m_useCertificate;
        
        public virtual bool UseCertificate
        {
            get
            {
                return m_useCertificate;
            }
            set
            {
                m_useCertificate = value;
            }
        }
        
        private bool m_useLoginToken;
        
        public virtual bool UseLoginToken
        {
            get
            {
                return m_useLoginToken;
            }
            set
            {
                m_useLoginToken = value;
            }
        }
        
        private VersionExtended m_version;
        
        public virtual VersionExtended Version
        {
            get
            {
                return m_version;
            }
            set
            {
                m_version = value;
            }
        }
        
        private string m_lang;
        
        public virtual string Lang
        {
            get
            {
                return m_lang;
            }
            set
            {
                m_lang = value;
            }
        }
        
        private List<System.Byte> m_credentials;
        
        public virtual List<System.Byte> Credentials
        {
            get
            {
                return m_credentials;
            }
            set
            {
                m_credentials = value;
            }
        }
        
        private short m_serverId;
        
        public virtual short ServerId
        {
            get
            {
                return m_serverId;
            }
            set
            {
                m_serverId = value;
            }
        }
        
        private long m_sessionOptionalSalt;
        
        public virtual long SessionOptionalSalt
        {
            get
            {
                return m_sessionOptionalSalt;
            }
            set
            {
                m_sessionOptionalSalt = value;
            }
        }
        
        private List<System.UInt16> m_failedAttempts;
        
        public virtual List<System.UInt16> FailedAttempts
        {
            get
            {
                return m_failedAttempts;
            }
            set
            {
                m_failedAttempts = value;
            }
        }
        
        public void Initiate(bool autoconnect, bool useCertificate, bool useLoginToken, VersionExtended version, string lang, List<System.Byte> credentials, short serverId, long sessionOptionalSalt, List<System.UInt16> failedAttempts)
        {
            m_autoconnect = autoconnect;
            m_useCertificate = useCertificate;
            m_useLoginToken = useLoginToken;
            m_version = version;
            m_lang = lang;
            m_credentials = credentials;
            m_serverId = serverId;
            m_sessionOptionalSalt = sessionOptionalSalt;
            m_failedAttempts = failedAttempts;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            byte flag = new byte();
            BooleanByteWrapper.SetFlag(0, flag, m_autoconnect);
            BooleanByteWrapper.SetFlag(1, flag, m_useCertificate);
            BooleanByteWrapper.SetFlag(2, flag, m_useLoginToken);
            writer.WriteByte(flag);
            m_version.Serialize(writer);
            writer.WriteUTF(m_lang);
            writer.WriteShort(((short)(m_credentials.Count)));
            int credentialsIndex;
            for (credentialsIndex = 0; (credentialsIndex < m_credentials.Count); credentialsIndex = (credentialsIndex + 1))
            {
                writer.WriteByte(m_credentials[credentialsIndex]);
            }
            writer.WriteShort(m_serverId);
            writer.WriteVarLong(m_sessionOptionalSalt);
            writer.WriteShort(((short)(m_failedAttempts.Count)));
            int failedAttemptsIndex;
            for (failedAttemptsIndex = 0; (failedAttemptsIndex < m_failedAttempts.Count); failedAttemptsIndex = (failedAttemptsIndex + 1))
            {
                writer.WriteVarUhShort(m_failedAttempts[failedAttemptsIndex]);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            byte flag = reader.ReadByte();
            m_autoconnect = BooleanByteWrapper.GetFlag(flag, 0);
            m_useCertificate = BooleanByteWrapper.GetFlag(flag, 1);
            m_useLoginToken = BooleanByteWrapper.GetFlag(flag, 2);
            m_version = new VersionExtended();
            m_version.Deserialize(reader);
            m_lang = reader.ReadUTF();
            int credentialsCount = reader.ReadUShort();
            int credentialsIndex;
            m_credentials = new System.Collections.Generic.List<byte>();
            for (credentialsIndex = 0; (credentialsIndex < credentialsCount); credentialsIndex = (credentialsIndex + 1))
            {
                m_credentials.Add(reader.ReadByte());
            }
            m_serverId = reader.ReadShort();
            m_sessionOptionalSalt = reader.ReadVarLong();
            int failedAttemptsCount = reader.ReadUShort();
            int failedAttemptsIndex;
            m_failedAttempts = new System.Collections.Generic.List<ushort>();
            for (failedAttemptsIndex = 0; (failedAttemptsIndex < failedAttemptsCount); failedAttemptsIndex = (failedAttemptsIndex + 1))
            {
                m_failedAttempts.Add(reader.ReadVarUhShort());
            }
        }
    }
}
