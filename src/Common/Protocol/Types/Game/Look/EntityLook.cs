//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Types.Game.Look
{
    using System.Collections.Generic;
    using System;
    
    
    public class EntityLook : NetworkType
    {
        
        public const int Id = 55;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private ushort m_bonesId;
        
        public virtual ushort BonesId
        {
            get
            {
                return m_bonesId;
            }
            set
            {
                m_bonesId = value;
            }
        }
        
        private List<System.UInt16> m_skins;
        
        public virtual List<System.UInt16> Skins
        {
            get
            {
                return m_skins;
            }
            set
            {
                m_skins = value;
            }
        }
        
        private List<System.Int32> m_indexedColors;
        
        public virtual List<System.Int32> IndexedColors
        {
            get
            {
                return m_indexedColors;
            }
            set
            {
                m_indexedColors = value;
            }
        }
        
        private List<System.Int16> m_scales;
        
        public virtual List<System.Int16> Scales
        {
            get
            {
                return m_scales;
            }
            set
            {
                m_scales = value;
            }
        }
        
        private List<SubEntity> m_subentities;
        
        public virtual List<SubEntity> Subentities
        {
            get
            {
                return m_subentities;
            }
            set
            {
                m_subentities = value;
            }
        }
        
        public void Initiate(ushort bonesId, List<System.UInt16> skins, List<System.Int32> indexedColors, List<System.Int16> scales, List<SubEntity> subentities)
        {
            m_bonesId = bonesId;
            m_skins = skins;
            m_indexedColors = indexedColors;
            m_scales = scales;
            m_subentities = subentities;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteVarUhShort(m_bonesId);
            writer.WriteShort(((short)(m_skins.Count)));
            int skinsIndex;
            for (skinsIndex = 0; (skinsIndex < m_skins.Count); skinsIndex = (skinsIndex + 1))
            {
                writer.WriteVarUhShort(m_skins[skinsIndex]);
            }
            writer.WriteShort(((short)(m_indexedColors.Count)));
            int indexedColorsIndex;
            for (indexedColorsIndex = 0; (indexedColorsIndex < m_indexedColors.Count); indexedColorsIndex = (indexedColorsIndex + 1))
            {
                writer.WriteInt(m_indexedColors[indexedColorsIndex]);
            }
            writer.WriteShort(((short)(m_scales.Count)));
            int scalesIndex;
            for (scalesIndex = 0; (scalesIndex < m_scales.Count); scalesIndex = (scalesIndex + 1))
            {
                writer.WriteVarShort(m_scales[scalesIndex]);
            }
            writer.WriteShort(((short)(m_subentities.Count)));
            int subentitiesIndex;
            for (subentitiesIndex = 0; (subentitiesIndex < m_subentities.Count); subentitiesIndex = (subentitiesIndex + 1))
            {
                SubEntity objectToSend = m_subentities[subentitiesIndex];
                objectToSend.Serialize(writer);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            m_bonesId = reader.ReadVarUhShort();
            int skinsCount = reader.ReadUShort();
            int skinsIndex;
            m_skins = new System.Collections.Generic.List<ushort>();
            for (skinsIndex = 0; (skinsIndex < skinsCount); skinsIndex = (skinsIndex + 1))
            {
                m_skins.Add(reader.ReadVarUhShort());
            }
            int indexedColorsCount = reader.ReadUShort();
            int indexedColorsIndex;
            m_indexedColors = new System.Collections.Generic.List<int>();
            for (indexedColorsIndex = 0; (indexedColorsIndex < indexedColorsCount); indexedColorsIndex = (indexedColorsIndex + 1))
            {
                m_indexedColors.Add(reader.ReadInt());
            }
            int scalesCount = reader.ReadUShort();
            int scalesIndex;
            m_scales = new System.Collections.Generic.List<short>();
            for (scalesIndex = 0; (scalesIndex < scalesCount); scalesIndex = (scalesIndex + 1))
            {
                m_scales.Add(reader.ReadVarShort());
            }
            int subentitiesCount = reader.ReadUShort();
            int subentitiesIndex;
            m_subentities = new System.Collections.Generic.List<SubEntity>();
            for (subentitiesIndex = 0; (subentitiesIndex < subentitiesCount); subentitiesIndex = (subentitiesIndex + 1))
            {
                SubEntity objectToAdd = new SubEntity();
                objectToAdd.Deserialize(reader);
                m_subentities.Add(objectToAdd);
            }
        }
    }
}
