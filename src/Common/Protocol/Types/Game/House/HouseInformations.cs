//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Types.Game.House
{
    using System.Collections.Generic;
    using System;
    
    
    public class HouseInformations : NetworkType
    {
        
        public const int Id = 111;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private bool m_isOnSale;
        
        public virtual bool IsOnSale
        {
            get
            {
                return m_isOnSale;
            }
            set
            {
                m_isOnSale = value;
            }
        }
        
        private bool m_isSaleLocked;
        
        public virtual bool IsSaleLocked
        {
            get
            {
                return m_isSaleLocked;
            }
            set
            {
                m_isSaleLocked = value;
            }
        }
        
        private uint m_houseId;
        
        public virtual uint HouseId
        {
            get
            {
                return m_houseId;
            }
            set
            {
                m_houseId = value;
            }
        }
        
        private List<System.Int32> m_doorsOnMap;
        
        public virtual List<System.Int32> DoorsOnMap
        {
            get
            {
                return m_doorsOnMap;
            }
            set
            {
                m_doorsOnMap = value;
            }
        }
        
        private string m_ownerName;
        
        public virtual string OwnerName
        {
            get
            {
                return m_ownerName;
            }
            set
            {
                m_ownerName = value;
            }
        }
        
        private ushort m_modelId;
        
        public virtual ushort ModelId
        {
            get
            {
                return m_modelId;
            }
            set
            {
                m_modelId = value;
            }
        }
        
        public void Initiate(bool isOnSale, bool isSaleLocked, uint houseId, List<System.Int32> doorsOnMap, string ownerName, ushort modelId)
        {
            m_isOnSale = isOnSale;
            m_isSaleLocked = isSaleLocked;
            m_houseId = houseId;
            m_doorsOnMap = doorsOnMap;
            m_ownerName = ownerName;
            m_modelId = modelId;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            byte flag = new byte();
            BooleanByteWrapper.SetFlag(0, flag, m_isOnSale);
            BooleanByteWrapper.SetFlag(1, flag, m_isSaleLocked);
            writer.WriteByte(flag);
            writer.WriteVarUhInt(m_houseId);
            writer.WriteShort(((short)(m_doorsOnMap.Count)));
            int doorsOnMapIndex;
            for (doorsOnMapIndex = 0; (doorsOnMapIndex < m_doorsOnMap.Count); doorsOnMapIndex = (doorsOnMapIndex + 1))
            {
                writer.WriteInt(m_doorsOnMap[doorsOnMapIndex]);
            }
            writer.WriteUTF(m_ownerName);
            writer.WriteVarUhShort(m_modelId);
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            byte flag = reader.ReadByte();
            m_isOnSale = BooleanByteWrapper.GetFlag(flag, 0);
            m_isSaleLocked = BooleanByteWrapper.GetFlag(flag, 1);
            m_houseId = reader.ReadVarUhInt();
            int doorsOnMapCount = reader.ReadUShort();
            int doorsOnMapIndex;
            m_doorsOnMap = new System.Collections.Generic.List<int>();
            for (doorsOnMapIndex = 0; (doorsOnMapIndex < doorsOnMapCount); doorsOnMapIndex = (doorsOnMapIndex + 1))
            {
                m_doorsOnMap.Add(reader.ReadInt());
            }
            m_ownerName = reader.ReadUTF();
            m_modelId = reader.ReadVarUhShort();
        }
    }
}
