//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Types.Game.Guild
{
    using Common.Protocol.Network.Types.Game.Character;
    using Common.Protocol.Network.Types.Game.Character.Status;
    using Common.Protocol.Network;
    using System.Collections.Generic;
    using System;
    
    
    public class GuildMember : CharacterMinimalInformations
    {
        
        public const int Id = 88;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private byte m_breed;
        
        public virtual byte Breed
        {
            get
            {
                return m_breed;
            }
            set
            {
                m_breed = value;
            }
        }
        
        private bool m_sex;
        
        public virtual bool Sex
        {
            get
            {
                return m_sex;
            }
            set
            {
                m_sex = value;
            }
        }
        
        private ushort m_rank;
        
        public virtual ushort Rank
        {
            get
            {
                return m_rank;
            }
            set
            {
                m_rank = value;
            }
        }
        
        private ulong m_givenExperience;
        
        public virtual ulong GivenExperience
        {
            get
            {
                return m_givenExperience;
            }
            set
            {
                m_givenExperience = value;
            }
        }
        
        private byte m_experienceGivenPercent;
        
        public virtual byte ExperienceGivenPercent
        {
            get
            {
                return m_experienceGivenPercent;
            }
            set
            {
                m_experienceGivenPercent = value;
            }
        }
        
        private uint m_rights;
        
        public virtual uint Rights
        {
            get
            {
                return m_rights;
            }
            set
            {
                m_rights = value;
            }
        }
        
        private byte m_connected;
        
        public virtual byte Connected
        {
            get
            {
                return m_connected;
            }
            set
            {
                m_connected = value;
            }
        }
        
        private byte m_alignmentSide;
        
        public virtual byte AlignmentSide
        {
            get
            {
                return m_alignmentSide;
            }
            set
            {
                m_alignmentSide = value;
            }
        }
        
        private ushort m_hoursSinceLastConnection;
        
        public virtual ushort HoursSinceLastConnection
        {
            get
            {
                return m_hoursSinceLastConnection;
            }
            set
            {
                m_hoursSinceLastConnection = value;
            }
        }
        
        private byte m_moodSmileyId;
        
        public virtual byte MoodSmileyId
        {
            get
            {
                return m_moodSmileyId;
            }
            set
            {
                m_moodSmileyId = value;
            }
        }
        
        private int m_accountId;
        
        public virtual int AccountId
        {
            get
            {
                return m_accountId;
            }
            set
            {
                m_accountId = value;
            }
        }
        
        private int m_achievementPoints;
        
        public virtual int AchievementPoints
        {
            get
            {
                return m_achievementPoints;
            }
            set
            {
                m_achievementPoints = value;
            }
        }
        
        private PlayerStatus m_status;
        
        public virtual PlayerStatus Status
        {
            get
            {
                return m_status;
            }
            set
            {
                m_status = value;
            }
        }
        
        public void Initiate(byte breed, bool sex, ushort rank, ulong givenExperience, byte experienceGivenPercent, uint rights, byte connected, byte alignmentSide, ushort hoursSinceLastConnection, byte moodSmileyId, int accountId, int achievementPoints, PlayerStatus status)
        {
            m_breed = breed;
            m_sex = sex;
            m_rank = rank;
            m_givenExperience = givenExperience;
            m_experienceGivenPercent = experienceGivenPercent;
            m_rights = rights;
            m_connected = connected;
            m_alignmentSide = alignmentSide;
            m_hoursSinceLastConnection = hoursSinceLastConnection;
            m_moodSmileyId = moodSmileyId;
            m_accountId = accountId;
            m_achievementPoints = achievementPoints;
            m_status = status;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            base.Serialize(writer);
            writer.WriteByte(m_breed);
            writer.WriteBoolean(m_sex);
            writer.WriteVarUhShort(m_rank);
            writer.WriteVarUhLong(m_givenExperience);
            writer.WriteByte(m_experienceGivenPercent);
            writer.WriteVarUhInt(m_rights);
            writer.WriteByte(m_connected);
            writer.WriteByte(m_alignmentSide);
            writer.WriteUShort(m_hoursSinceLastConnection);
            writer.WriteByte(m_moodSmileyId);
            writer.WriteInt(m_accountId);
            writer.WriteInt(m_achievementPoints);
            writer.WriteUShort(((ushort)(m_status.ProtocolId)));
            m_status.Serialize(writer);
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            base.Deserialize(reader);
            m_breed = reader.ReadByte();
            m_sex = reader.ReadBoolean();
            m_rank = reader.ReadVarUhShort();
            m_givenExperience = reader.ReadVarUhLong();
            m_experienceGivenPercent = reader.ReadByte();
            m_rights = reader.ReadVarUhInt();
            m_connected = reader.ReadByte();
            m_alignmentSide = reader.ReadByte();
            m_hoursSinceLastConnection = reader.ReadUShort();
            m_moodSmileyId = reader.ReadByte();
            m_accountId = reader.ReadInt();
            m_achievementPoints = reader.ReadInt();
            m_status = ProtocolManager.GetTypeInstance<PlayerStatus>(reader.ReadUShort());
            m_status.Deserialize(reader);
        }
    }
}
