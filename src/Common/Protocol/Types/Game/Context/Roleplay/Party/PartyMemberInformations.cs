//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Types.Game.Context.Roleplay.Party
{
    using Common.Protocol.Network.Types.Game.Character.Choice;
    using Common.Protocol.Network.Types.Game.Character.Status;
    using Common.Protocol.Network.Types.Game.Context.Roleplay.Party.Companion;
    using Common.Protocol.Network.Types.Game.Look;
    using Common.Protocol.Network;
    using System.Collections.Generic;
    using System;
    
    
    public class PartyMemberInformations : CharacterBaseInformations
    {
        
        public const int Id = 90;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private uint m_lifePoints;
        
        public virtual uint LifePoints
        {
            get
            {
                return m_lifePoints;
            }
            set
            {
                m_lifePoints = value;
            }
        }
        
        private uint m_maxLifePoints;
        
        public virtual uint MaxLifePoints
        {
            get
            {
                return m_maxLifePoints;
            }
            set
            {
                m_maxLifePoints = value;
            }
        }
        
        private ushort m_prospecting;
        
        public virtual ushort Prospecting
        {
            get
            {
                return m_prospecting;
            }
            set
            {
                m_prospecting = value;
            }
        }
        
        private sbyte m_regenRate;
        
        public virtual sbyte RegenRate
        {
            get
            {
                return m_regenRate;
            }
            set
            {
                m_regenRate = value;
            }
        }
        
        private ushort m_initiative;
        
        public virtual ushort Initiative
        {
            get
            {
                return m_initiative;
            }
            set
            {
                m_initiative = value;
            }
        }
        
        private byte m_alignmentSide;
        
        public virtual byte AlignmentSide
        {
            get
            {
                return m_alignmentSide;
            }
            set
            {
                m_alignmentSide = value;
            }
        }
        
        private short m_worldX;
        
        public virtual short WorldX
        {
            get
            {
                return m_worldX;
            }
            set
            {
                m_worldX = value;
            }
        }
        
        private short m_worldY;
        
        public virtual short WorldY
        {
            get
            {
                return m_worldY;
            }
            set
            {
                m_worldY = value;
            }
        }
        
        private int m_mapId;
        
        public virtual int MapId
        {
            get
            {
                return m_mapId;
            }
            set
            {
                m_mapId = value;
            }
        }
        
        private ushort m_subAreaId;
        
        public virtual ushort SubAreaId
        {
            get
            {
                return m_subAreaId;
            }
            set
            {
                m_subAreaId = value;
            }
        }
        
        private PlayerStatus m_status;
        
        public virtual PlayerStatus Status
        {
            get
            {
                return m_status;
            }
            set
            {
                m_status = value;
            }
        }
        
        private List<PartyCompanionMemberInformations> m_companions;
        
        public virtual List<PartyCompanionMemberInformations> Companions
        {
            get
            {
                return m_companions;
            }
            set
            {
                m_companions = value;
            }
        }
        
        public void Initiate(uint lifePoints, uint maxLifePoints, ushort prospecting, sbyte regenRate, ushort initiative, byte alignmentSide, short worldX, short worldY, int mapId, ushort subAreaId, PlayerStatus status, List<PartyCompanionMemberInformations> companions)
        {
            m_lifePoints = lifePoints;
            m_maxLifePoints = maxLifePoints;
            m_prospecting = prospecting;
            m_regenRate = regenRate;
            m_initiative = initiative;
            m_alignmentSide = alignmentSide;
            m_worldX = worldX;
            m_worldY = worldY;
            m_mapId = mapId;
            m_subAreaId = subAreaId;
            m_status = status;
            m_companions = companions;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            base.Serialize(writer);
            writer.WriteVarUhInt(m_lifePoints);
            writer.WriteVarUhInt(m_maxLifePoints);
            writer.WriteVarUhShort(m_prospecting);
            writer.WriteSByte(m_regenRate);
            writer.WriteVarUhShort(m_initiative);
            writer.WriteByte(m_alignmentSide);
            writer.WriteShort(m_worldX);
            writer.WriteShort(m_worldY);
            writer.WriteInt(m_mapId);
            writer.WriteVarUhShort(m_subAreaId);
            writer.WriteUShort(((ushort)(m_status.ProtocolId)));
            m_status.Serialize(writer);
            writer.WriteShort(((short)(m_companions.Count)));
            int companionsIndex;
            for (companionsIndex = 0; (companionsIndex < m_companions.Count); companionsIndex = (companionsIndex + 1))
            {
                PartyCompanionMemberInformations objectToSend = m_companions[companionsIndex];
                objectToSend.Serialize(writer);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            base.Deserialize(reader);
            m_lifePoints = reader.ReadVarUhInt();
            m_maxLifePoints = reader.ReadVarUhInt();
            m_prospecting = reader.ReadVarUhShort();
            m_regenRate = reader.ReadSByte();
            m_initiative = reader.ReadVarUhShort();
            m_alignmentSide = reader.ReadByte();
            m_worldX = reader.ReadShort();
            m_worldY = reader.ReadShort();
            m_mapId = reader.ReadInt();
            m_subAreaId = reader.ReadVarUhShort();
            m_status = ProtocolManager.GetTypeInstance<PlayerStatus>(reader.ReadUShort());
            m_status.Deserialize(reader);
            int companionsCount = reader.ReadUShort();
            int companionsIndex;
            m_companions = new System.Collections.Generic.List<PartyCompanionMemberInformations>();
            for (companionsIndex = 0; (companionsIndex < companionsCount); companionsIndex = (companionsIndex + 1))
            {
                PartyCompanionMemberInformations objectToAdd = new PartyCompanionMemberInformations();
                objectToAdd.Deserialize(reader);
                m_companions.Add(objectToAdd);
            }
        }
    }
}
