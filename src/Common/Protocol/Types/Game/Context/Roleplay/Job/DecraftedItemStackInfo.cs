//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18063
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.Protocol.Network.Types.Game.Context.Roleplay.Job
{
    using System.Collections.Generic;
    using System;
    
    
    public class DecraftedItemStackInfo : NetworkType
    {
        
        public const int Id = 481;
        
        public override int ProtocolId
        {
            get
            {
                return Id;
            }
        }
        
        private uint m_objectUID;
        
        public virtual uint ObjectUID
        {
            get
            {
                return m_objectUID;
            }
            set
            {
                m_objectUID = value;
            }
        }
        
        private float m_bonusMin;
        
        public virtual float BonusMin
        {
            get
            {
                return m_bonusMin;
            }
            set
            {
                m_bonusMin = value;
            }
        }
        
        private float m_bonusMax;
        
        public virtual float BonusMax
        {
            get
            {
                return m_bonusMax;
            }
            set
            {
                m_bonusMax = value;
            }
        }
        
        private List<System.UInt16> m_runesId;
        
        public virtual List<System.UInt16> RunesId
        {
            get
            {
                return m_runesId;
            }
            set
            {
                m_runesId = value;
            }
        }
        
        private List<System.UInt32> m_runesQty;
        
        public virtual List<System.UInt32> RunesQty
        {
            get
            {
                return m_runesQty;
            }
            set
            {
                m_runesQty = value;
            }
        }
        
        public void Initiate(uint objectUID, float bonusMin, float bonusMax, List<System.UInt16> runesId, List<System.UInt32> runesQty)
        {
            m_objectUID = objectUID;
            m_bonusMin = bonusMin;
            m_bonusMax = bonusMax;
            m_runesId = runesId;
            m_runesQty = runesQty;
        }
        
        public override void Serialize(ICustomDataWriter writer)
        {
            writer.WriteVarUhInt(m_objectUID);
            writer.WriteFloat(m_bonusMin);
            writer.WriteFloat(m_bonusMax);
            writer.WriteShort(((short)(m_runesId.Count)));
            int runesIdIndex;
            for (runesIdIndex = 0; (runesIdIndex < m_runesId.Count); runesIdIndex = (runesIdIndex + 1))
            {
                writer.WriteVarUhShort(m_runesId[runesIdIndex]);
            }
            writer.WriteShort(((short)(m_runesQty.Count)));
            int runesQtyIndex;
            for (runesQtyIndex = 0; (runesQtyIndex < m_runesQty.Count); runesQtyIndex = (runesQtyIndex + 1))
            {
                writer.WriteVarUhInt(m_runesQty[runesQtyIndex]);
            }
        }
        
        public override void Deserialize(ICustomDataReader reader)
        {
            m_objectUID = reader.ReadVarUhInt();
            m_bonusMin = reader.ReadFloat();
            m_bonusMax = reader.ReadFloat();
            int runesIdCount = reader.ReadUShort();
            int runesIdIndex;
            m_runesId = new System.Collections.Generic.List<ushort>();
            for (runesIdIndex = 0; (runesIdIndex < runesIdCount); runesIdIndex = (runesIdIndex + 1))
            {
                m_runesId.Add(reader.ReadVarUhShort());
            }
            int runesQtyCount = reader.ReadUShort();
            int runesQtyIndex;
            m_runesQty = new System.Collections.Generic.List<uint>();
            for (runesQtyIndex = 0; (runesQtyIndex < runesQtyCount); runesQtyIndex = (runesQtyIndex + 1))
            {
                m_runesQty.Add(reader.ReadVarUhInt());
            }
        }
    }
}
